// ===================================================================
// SISTEMA DE EXPORTACIÓN PDF ARVIC - VERSIÓN FINAL COMPLETA
// Replica EXACTAMENTE el diseño de la imagen de referencia objetivo
// ===================================================================

/**
 * COLORES CORPORATIVOS ARVIC 
 */
const ARVIC_COLORS = {
    primary: '#1976D2',      // Azul principal de los headers
    secondary: '#2196F3', 
    light: '#E3F2FD',       // Azul muy claro para filas alternadas
    dark: '#0D47A1',
    gray: '#666666',
    lightGray: '#F5F5F5',   // Gris para filas alternadas
    white: '#FFFFFF',
    black: '#000000',
    textGray: '#555555'     // Para texto general
};

const ARVIC_LOGO_BASE64 = 'data:image/png;base64,' + 
'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'+
'';

/**
 * CONFIGURACIÓN PDF OPTIMIZADA
 */
const PDF_CONFIG = {
    margin: 20,
    headerHeight: 95,       // Más espacio para header completo con metadata
    logoSize: 40,
    titleFontSize: 18,
    subtitleFontSize: 12,
    headerFontSize: 10,
    dataFontSize: 10,       // Aumentado de 9 a 10
    metadataFontSize: 9,    // Aumentado de 8 a 9
    lineHeight: 14,         // Aumentado de 12 a 14
    pageFormat: 'a4',
    orientation: 'landscape'
};

const PDF_CONFIG_OPTIMIZED = {
    ...PDF_CONFIG, // Mantener configuración existente
    dataFontSize: 9,     // Reducido de 10 a 9 para más contenido
    headerFontSize: 10,  // Reducido de 11 a 10
    margin: 15,          // Reducido de 20 a 15 para más espacio
    headerHeight: 45     // Reducido de 50 a 45
};

/**
 * CLASE PRINCIPAL - EXPORTADOR PDF ARVIC CORREGIDO
 */
class ARVICPDFExporter {
    constructor() {
        this.loadJsPDF();
    }

    /**
     * Cargar jsPDF si no está disponible
     */
    async loadJsPDF() {
        if (typeof window.jspdf === 'undefined') {
            const script = document.createElement('script');
            script.src = 'https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js';
            document.head.appendChild(script);
            
            return new Promise((resolve) => {
                script.onload = () => {
                    this.jsPDF = window.jspdf.jsPDF;
                    resolve();
                };
            });
        } else {
            this.jsPDF = window.jspdf.jsPDF;
        }
    }

    /**
     * FUNCIÓN PRINCIPAL - Exportar datos a PDF
     */
    async exportToPDF(config, data, headers, metadata = {}) {
        await this.loadJsPDF();
        
        console.log('🎯 Iniciando exportación PDF optimizada:', {
            reportType: config.reportType,
            dataCount: data.length,
            headers: headers,
            metadata: metadata
        });
        
        const doc = new this.jsPDF({
            orientation: 'landscape',
            unit: 'mm',
            format: 'a4'
        });

        // Configurar documento
        this.setupDocument(doc, config);
        
        // Añadir header completo (logo + título + metadata)
        this.addCompleteHeader(doc, config, metadata);
        
        // Añadir tabla con datos (ya incluye footers en cada página)
        this.addDataTable(doc, data, headers, config);
        
        // NOTA: No llamar addFooter aquí porque ya se llama en addDataTable
        
        // Generar nombre de archivo y descargar
        const fileName = this.generateFileName(config.reportType, metadata);
        doc.save(fileName);
        
        // Notificación de éxito
        if (window.NotificationUtils) {
            window.NotificationUtils.success(`PDF generado exitosamente: ${fileName}`);
        }
        
        return fileName;
    }

    /**
     * Configurar propiedades del documento
     */
    setupDocument(doc, config) {
        doc.setProperties({
            title: `${config.title} - ARVIC`,
            subject: 'Reporte generado automáticamente',
            author: 'Sistema ARVIC',
            creator: 'Portal Administrativo ARVIC'
        });
    }

    /**
     * Añadir header completo (espaciado ultra-compacto como imagen objetivo)
     */
    addCompleteHeader(doc, config, metadata) {
        const pageWidth = doc.internal.pageSize.getWidth();
        
        // === LOGO REAL DE ARVIC (lado izquierdo) ===
        this.addARVICLogo(doc, 25, 22);
        
        // === TÍTULO PRINCIPAL (centro) ===
        const titleText = this.getTitleByReportType(config.reportType);
        doc.setTextColor(ARVIC_COLORS.primary);
        doc.setFont('helvetica', 'bold');
        doc.setFontSize(PDF_CONFIG.titleFontSize);
        doc.text(titleText, pageWidth / 2, 30, { align: 'center' });
        
        // Subtítulo empresa
        doc.setTextColor(ARVIC_COLORS.textGray);
        doc.setFont('helvetica', 'normal');
        doc.setFontSize(PDF_CONFIG.subtitleFontSize);
        doc.text('GRUPO IT ARVIC', pageWidth / 2, 40, { align: 'center' });
        
        // === LÍNEA SEPARADORA ===
        doc.setDrawColor(ARVIC_COLORS.primary);
        doc.setLineWidth(0.8);
        doc.line(PDF_CONFIG.margin, 48, pageWidth - PDF_CONFIG.margin, 48);
        
        // === METADATA COMPLETA (pasando reportType) ===
        this.addCompleteMetadataSection(doc, metadata, 52, config.reportType);
    }

    addSimpleLogoFallback(doc, x, y) {
        // Círculo azul
        doc.setFillColor(ARVIC_COLORS.primary);
        doc.circle(x, y, 15, 'F');
        
        // Letra "A" blanca
        doc.setTextColor(ARVIC_COLORS.white);
        doc.setFont('helvetica', 'bold');
        doc.setFontSize(20);
        doc.text('A', x, y + 5, { align: 'center' });
        
        // Texto al lado
        doc.setTextColor(ARVIC_COLORS.black);
        doc.setFont('helvetica', 'normal');
        doc.setFontSize(8);
        doc.text('GRUPO IT', x + 20, y - 5);
        
        doc.setFont('helvetica', 'bold');
        doc.setFontSize(16);
        doc.text('ARVIC', x + 20, y + 8);
    }

    /**
     * Añadir logo real de ARVIC (replicando el diseño exacto)
     */
    addARVICLogo(doc, x, y) {
        try {
            // El logo completo incluye el círculo + texto
            // Tamaño ajustado para que se vea bien (puedes modificar el ancho/alto)
            const logoWidth = 70;  // Ajusta según necesites
            const logoHeight = 20; // Ajusta según necesites
            
            doc.addImage(
                ARVIC_LOGO_BASE64, 
                'PNG', 
                x - 10,           // Posición X (ajusta si necesitas)
                y - 10,           // Posición Y (ajusta si necesitas)
                logoWidth, 
                logoHeight
            );
        } catch (error) {
            console.error('❌ Error cargando logo:', error);
            // Fallback: usar logo simple si falla
            this.addSimpleLogoFallback(doc, x, y);
        }
    }

    /**
     * Obtener título según tipo de reporte
     */
    getTitleByReportType(reportType) {
        const titles = {
            'pago-consultor-general': 'REPORTE GENERAL DE PAGOS',
            'pago-consultor-especifico': 'REPORTE DE PAGO A CONSULTOR',
            'cliente-soporte': 'REPORTE DE SOPORTE AL CLIENTE',
            'remanente': 'REPORTE REMANENTE',
            'proyecto-general': 'REPORTE GENERAL DE PROYECTOS',
            'proyecto-cliente': 'REPORTE DE PROYECTO',
            'proyecto-consultor': 'REPORTE DE CONSULTOR - PROYECTOS'
        };
        
        return titles[reportType] || 'REPORTE ARVIC';
    }

    /**
     * Añadir sección de metadata completa (espaciado mínimo)
     */
    addCompleteMetadataSection(doc, metadata, startY, reportType) {
        const pageWidth = doc.internal.pageSize.getWidth();
        let yPos = startY;
        
        doc.setFont('helvetica', 'normal');
        doc.setFontSize(PDF_CONFIG.metadataFontSize);
        doc.setTextColor(ARVIC_COLORS.textGray);
        
        // Determinar qué información mostrar según el tipo de reporte
        const shouldShowCliente = this.shouldShowClienteInfo(reportType, metadata);
        const shouldShowConsultor = this.shouldShowConsultorInfo(reportType, metadata);
        
        let leftSideLines = [];
        
        // === LADO IZQUIERDO (información de filtros) ===
        
        // Cliente (solo si debe mostrarse)
        if (shouldShowCliente) {
            const clienteText = (metadata.cliente && metadata.cliente !== 'Todos los clientes') 
                ? `Cliente: ${metadata.cliente}` 
                : 'Cliente: N/A';
            leftSideLines.push(clienteText);
        }
        
        // Consultor (solo si debe mostrarse)  
        if (shouldShowConsultor) {
            const consultorText = (metadata.consultor && metadata.consultor !== 'Todos los consultores') 
                ? `Consultor: ${metadata.consultor}` 
                : 'Consultor: N/A';
            leftSideLines.push(consultorText);
        }
        
        // Dibujar líneas del lado izquierdo
        leftSideLines.forEach((line, index) => {
            doc.text(line, PDF_CONFIG.margin, yPos + (index * 4));
        });
        
        // === LADO DERECHO ===
        const fecha = new Date().toLocaleDateString('es-MX', {
            day: 'numeric',
            month: 'long',
            year: 'numeric'
        });
        doc.text(`Generado: ${fecha}`, pageWidth - PDF_CONFIG.margin, yPos, { align: 'right' });
        
        // Período (con texto mejorado)
        const periodoText = (metadata.mes && metadata.mes !== 'Todos los períodos') 
            ? `Período: ${metadata.mes}` 
            : 'Período: No seleccionado'; // CAMBIADO: ya no dice "N/A"
        doc.text(periodoText, pageWidth - PDF_CONFIG.margin, yPos + 4, { align: 'right' });
    }

    /**
     * NUEVA FUNCIÓN: Determinar si mostrar información de Cliente
     */
    shouldShowClienteInfo(reportType, metadata) {
        // Reportes que NO deben mostrar "Cliente N/A":
        const reportesOmitirCliente = [
            'pago-consultor-general',    // Reporte General de Pagos
            'pago-consultor-especifico', // Reporte De Pago A Consultor  
            'proyecto-general',          // Reporte General de Proyectos
            'proyecto-consultor'         // Reporte De Consultor - Proyectos
        ];
        
        // Si es un reporte que debe omitir cliente Y no hay cliente seleccionado, no mostrar
        if (reportesOmitirCliente.includes(reportType)) {
            // Solo mostrar si hay un cliente específico seleccionado
            return metadata.cliente && metadata.cliente !== 'Todos los clientes';
        }
        
        // Para otros reportes, mostrar siempre
        return true;
    }

    /**
     * NUEVA FUNCIÓN: Determinar si mostrar información de Consultor
     */
    shouldShowConsultorInfo(reportType, metadata) {
        // Reportes que NO deben mostrar "Consultor N/A":
        const reportesOmitirConsultor = [
            'pago-consultor-general',  // Reporte General de Pagos
            'cliente-soporte',         // Reporte De Soporte Al Cliente
            'proyecto-general',        // Reporte General de Proyectos  
            'proyecto-cliente'         // Reporte De Proyecto (Cliente)
        ];
        
        // Si es un reporte que debe omitir consultor Y no hay consultor seleccionado, no mostrar
        if (reportesOmitirConsultor.includes(reportType)) {
            // Solo mostrar si hay un consultor específico seleccionado
            return metadata.consultor && metadata.consultor !== 'Todos los consultores';
        }
        
        // Para otros reportes, mostrar siempre
        return true;
    }

    /**
     * Añadir tabla de datos con mejor separación entre totales y mensaje
     */
    addDataTable(doc, data, headers, config) {
        const startY = PDF_CONFIG.headerHeight + 1;
        const pageWidth = doc.internal.pageSize.getWidth();
        const tableWidth = pageWidth - (PDF_CONFIG.margin * 2);
        
        console.log('📊 addDataTable:', {
            reportType: config.reportType,
            dataLength: data.length,
            headers: headers
        });
        
        // 🔧 TRANSFORMAR DATOS SI ES REMANENTE
        let processedData = data;
        let processedHeaders = headers;
        
        if (config.reportType === 'remanente') {
            console.log('📊 Usando estructura jerárquica completa para remanente');
            
            const bottomMargin = 50;

            // 1. Extraer datos editables
            extraerDatosEditablesCorrectos();
            
            // 2. Transformar datos (ahora retorna { soportes: [], proyectos: [] })
            const transformed = this.transformRemanenteDataForPDF(window.editablePreviewData || {});
            
            console.log('📊 Datos transformados:', {
                soportes: transformed.soportes?.length || 0,
                proyectos: transformed.proyectos?.length || 0
            });
            
            console.log('📁 Array de proyectos después de transformación:', transformed.proyectos);

            // 3. Generar reporte multi-página con AMBAS secciones
            this.generateRemanenteMultiPageReport(doc, transformed.soportes, config, startY, transformed.proyectos);
            
            return;
        }
        
        // Calcular anchos de columna
        const columnWidths = this.calculateOptimalColumnWidths(processedHeaders, tableWidth, config.reportType);
        
        console.log('📊 Configuración final:', {
            headers: processedHeaders,
            columnWidths: columnWidths,
            dataLength: processedData.length
        });
        
        // Dibujar headers
        this.drawTableHeaders(doc, processedHeaders, columnWidths, startY);
        
        // Dibujar filas
        let currentY = startY + 12;
        const bottomMargin = 50;
        
        processedData.forEach((row, index) => {
            // Calcular altura necesaria
            const estimatedHeight = config.reportType === 'remanente' ? 18 : 14;
            
            // Verificar nueva página
            if (currentY + estimatedHeight > doc.internal.pageSize.getHeight() - bottomMargin) {
                this.addFooter(doc);
                doc.addPage();
                currentY = 30;
                this.drawTableHeaders(doc, processedHeaders, columnWidths, currentY);
                currentY += 12;
            }
            
            // Dibujar fila según tipo
            let actualHeight;
            if (config.reportType === 'remanente') {
                actualHeight = this.drawRemanenteDataRow(doc, row, processedHeaders, columnWidths, currentY, index);
            } else {
                actualHeight = this.drawDataRow(doc, row, processedHeaders, columnWidths, currentY, index, config.reportType);
            }
            
            currentY += actualHeight + 1;
        });
        
        // Añadir totales
        if (config.showTotals && processedData.length > 0) {
            currentY += 10;
            
            if (currentY + 30 > doc.internal.pageSize.getHeight() - bottomMargin) {
                this.addFooter(doc);
                doc.addPage();
                currentY = 30;
            }
            
            this.addSeparatedTotals(doc, processedData, pageWidth, currentY, config.reportType);
            
            const messageY = currentY + 25;
            doc.setFont('helvetica', 'italic');
            doc.setFontSize(8);
            doc.setTextColor(ARVIC_COLORS.black);
            doc.text('* Totales calculados con valores modificados en vista previa', 
                    pageWidth - PDF_CONFIG.margin, messageY, { align: 'right' });
        }
        
        // Footer final
        this.addFooter(doc);
    }

    /**
     * NUEVA FUNCIÓN: Estimar altura de fila antes de dibujarla
     */
    estimateRowHeight(doc, rowData, headers, columnWidths, reportType) {
        let maxLines = 1;
        
        headers.forEach((header, index) => {
            const width = columnWidths[index];
            let cellValue = this.getCellValue(rowData, header, reportType);
            const lines = this.splitTextToFitWidth(doc, cellValue.toString(), width - 8);
            
            if (lines.length > maxLines) {
                maxLines = lines.length;
            }
        });
        
        return Math.max(14, maxLines * 4); // 12mm mínimo, 4mm por línea adicional
    }

    /**
     * Añadir totales separados (replicando diseño exacto de imagen 1)
     */
    addSeparatedTotals(doc, data, pageWidth, y, reportType) {
        let totalHours = 0;
        let totalAmount = 0;
        
        // 🔧 CÁLCULO ESPECIAL PARA REPORTE REMANENTE
        if (reportType === 'remanente') {
            console.log('📊 Calculando totales para reporte remanente');
            
            data.forEach(row => {
                // Sumar total de horas de cada módulo
                totalHours += parseFloat(row.totalHoras || 0);
                
                // Sumar totales de todas las semanas
                const semanaKeys = Object.keys(row).filter(key => key.startsWith('semana'));
                semanaKeys.forEach(semanaKey => {
                    if (row[semanaKey] && row[semanaKey].total) {
                        totalAmount += parseFloat(row[semanaKey].total || 0);
                    }
                });
            });
            
            console.log(`📊 Totales remanente calculados: ${totalHours} hrs, $${totalAmount}`);
        } else {
            // 📋 CÁLCULO NORMAL PARA OTROS REPORTES
            totalHours = data.reduce((sum, row) => {
                return sum + parseFloat(row.editedTime || row.tiempo || row.hours || 0);
            }, 0);
            
            totalAmount = data.reduce((sum, row) => {
                return sum + parseFloat(row.editedTotal || row.total || 0);
            }, 0);
        }
        
        // Dibujar totales
        doc.setFont('helvetica', 'bold');
        doc.setFontSize(13);
        doc.setTextColor(ARVIC_COLORS.primary);
        
        doc.text(`Total Horas: ${totalHours.toFixed(1)} hrs`, 
                pageWidth - PDF_CONFIG.margin, y, { align: 'right' });
        
        doc.text(`Total Monto: ${totalAmount.toLocaleString('es-MX', { minimumFractionDigits: 2 })}`, 
                pageWidth - PDF_CONFIG.margin, y + 18, { align: 'right' });
    }


    /**
     * Calcular anchos de columna optimizados según tipo de reporte
     */
    calculateOptimalColumnWidths(headers, tableWidth, reportType) {
        const columnCount = headers.length;
        
        switch (reportType) {
            case 'pago-consultor-general':
            case 'pago-consultor-especifico':
                return [
                    tableWidth * 0.08, tableWidth * 0.15, tableWidth * 0.25, 
                    tableWidth * 0.20, tableWidth * 0.10, tableWidth * 0.10, tableWidth * 0.12
                ];
                
            case 'cliente-soporte':
                return [
                    tableWidth * 0.35, tableWidth * 0.25, tableWidth * 0.15, 
                    tableWidth * 0.15, tableWidth * 0.10
                ];
                
            case 'proyecto-cliente':
                return [
                    tableWidth * 0.40, tableWidth * 0.20, tableWidth * 0.20, tableWidth * 0.20
                ];
                
            case 'remanente':
                console.log('📊 Calculando anchos para 5 semanas');
                
                const totalColumnWidth = tableWidth * 0.15;
                const weekAreaWidth = tableWidth * 0.85;
                const numberOfWeeks = 5;  // FIJO: siempre 5 semanas
                const weekColumnWidth = weekAreaWidth / numberOfWeeks;
                const subColumnWidth = weekColumnWidth / 4;
                
                const widths = [totalColumnWidth];
                
                // 5 semanas × 4 subcolomnas = 20 columnas adicionales
                for (let semana = 1; semana <= numberOfWeeks; semana++) {
                    widths.push(subColumnWidth, subColumnWidth, subColumnWidth, subColumnWidth);
                }
                
                console.log(`📊 Anchos calculados para ${numberOfWeeks} semanas`);
                return widths;
                
            default:
                const standardWidth = tableWidth / columnCount;
                return Array(columnCount).fill(standardWidth);
        }
    }

    /**
     * Dibujar headers de tabla (con bordes más sutiles y consistentes)
     */
    drawTableHeaders(doc, headers, columnWidths, y) {
        let currentX = PDF_CONFIG.margin;
        
        headers.forEach((header, index) => {
            const width = columnWidths[index];
            
            // Fondo azul corporativo
            doc.setFillColor(ARVIC_COLORS.primary);
            doc.rect(currentX, y, width, 12, 'F');
            
            // Bordes sutiles (más delgados y grises)
            doc.setLineWidth(0.2);
            doc.setDrawColor(200, 200, 200); // Gris claro
            doc.rect(currentX, y, width, 12);
            
            // Texto del header (corregir "TARIFA de Modulo" a solo "TARIFA")
            doc.setFont('helvetica', 'bold');
            doc.setFontSize(PDF_CONFIG.headerFontSize);
            doc.setTextColor(ARVIC_COLORS.white);
            
            let headerText = header.toString();
            if (headerText === 'TARIFA de Modulo') {
                headerText = 'TARIFA';
            }
            
            const textWidth = doc.getTextWidth(headerText);
            const centerX = currentX + (width / 2) - (textWidth / 2);
            
            doc.text(headerText, centerX, y + 8);
            
            currentX += width;
        });
    }

    /**
     * NUEVA FUNCIÓN: Dividir texto para que quepa en el ancho especificado
     */
    splitTextToFitWidth(doc, text, maxWidth) {
        if (!text || text === 'N/A') return [text];
        
        const words = text.toString().split(' ');
        const lines = [];
        let currentLine = '';
        
        for (let word of words) {
            const testLine = currentLine ? `${currentLine} ${word}` : word;
            const testWidth = doc.getTextWidth(testLine);
            
            if (testWidth <= maxWidth) {
                currentLine = testLine;
            } else {
                if (currentLine) {
                    lines.push(currentLine);
                    currentLine = word;
                } else {
                    // Palabra muy larga, dividir por caracteres
                    lines.push(...this.splitLongWord(doc, word, maxWidth));
                    currentLine = '';
                }
            }
        }
        
        if (currentLine) {
            lines.push(currentLine);
        }
        
        return lines.length > 0 ? lines : [text];
    }

    /**
     * Dibujar fila de datos (con bordes sutiles y consistentes con headers)
     */
    drawDataRow(doc, rowData, headers, columnWidths, y, rowIndex, reportType) {
        let currentX = PDF_CONFIG.margin;
        const baseRowHeight = 14; // Altura base de fila (mínima)
        
        // Calcular la altura real necesaria para esta fila
        let maxTextHeight = baseRowHeight;
        const cellTexts = [];
        
        // Pre-procesar todos los textos para calcular altura necesaria
        headers.forEach((header, index) => {
            const width = columnWidths[index];
            let cellValue = this.getCellValue(rowData, header, reportType);
            
            // Verificar si el texto necesita ser dividido
            const lines = this.splitTextToFitWidth(doc, cellValue.toString(), width - 8); // 8mm de padding
            cellTexts[index] = lines;
            
            // Calcular altura necesaria
            const textHeight = lines.length * 4; // 4mm por línea
            if (textHeight > maxTextHeight) {
                maxTextHeight = textHeight;
            }
        });
        
        // Asegurar altura mínima
        const finalRowHeight = Math.max(maxTextHeight, baseRowHeight);
        
        // Fondo alternado
        if (rowIndex % 2 === 0) {
            doc.setFillColor(ARVIC_COLORS.lightGray);
            doc.rect(PDF_CONFIG.margin, y, columnWidths.reduce((a, b) => a + b, 0), finalRowHeight, 'F');
        }
        
        // Dibujar celdas y textos
        headers.forEach((header, index) => {
            const width = columnWidths[index];
            const lines = cellTexts[index];
            
            // Dibujar bordes de celda
            doc.setLineWidth(0.2);
            doc.setDrawColor(200, 200, 200);
            doc.rect(currentX, y, width, finalRowHeight);
            
            // Configurar texto
            doc.setFont('helvetica', 'normal');
            doc.setFontSize(PDF_CONFIG.dataFontSize);
            doc.setTextColor(ARVIC_COLORS.black);
            
            // Determinar alineación
            const alignment = this.getCellAlignment(header);
            
            // Dibujar cada línea de texto
            lines.forEach((line, lineIndex) => {
                let textX = currentX + 4; // Margen izquierdo por defecto
                
                if (alignment === 'center') {
                    textX = currentX + (width / 2);
                } else if (alignment === 'right') {
                    textX = currentX + width - 4;
                }
                
                const textY = y + 8 + (lineIndex * 4); // Espaciado entre líneas
                doc.text(line, textX, textY, { align: alignment });
            });
            
            currentX += width;
        });
        
        return finalRowHeight; // Retornar la altura real usada
    }

    /**
     * NUEVA FUNCIÓN: Dividir palabras muy largas por caracteres
     */
    splitLongWord(doc, word, maxWidth) {
        const lines = [];
        let currentPart = '';
        
        for (let char of word) {
            const testPart = currentPart + char;
            const testWidth = doc.getTextWidth(testPart);
            
            if (testWidth <= maxWidth) {
                currentPart = testPart;
            } else {
                if (currentPart) {
                    lines.push(currentPart);
                }
                currentPart = char;
            }
        }
        
        if (currentPart) {
            lines.push(currentPart);
        }
        
        return lines;
    }

    /**
     * Obtener valor de celda con mapeo correcto según el tipo de reporte
     */
    getCellValue(rowData, header, reportType) {
        console.log(`🔍 getCellValue - Header: "${header}", ReportType: "${reportType}"`);
        
        // 🔧 MANEJO ESPECIAL PARA REPORTE REMANENTE
        if (reportType === 'remanente') {
            console.log('📊 Procesando celda de reporte remanente:', header);
            
            if (header === 'Total de Horas') {
                const totalHoras = rowData.totalHoras || 0;
                return `${parseFloat(totalHoras).toFixed(1)} hrs`;
            }
            
            // Para subcolomnas de semana (MODULO, TIEMPO, TARIFA, TOTAL)
            if (header === 'MODULO') {
                // Determinar qué semana basándose en la posición en headers
                // Esto se maneja de forma diferente - ver drawDataRow corregida
                return header; // Placeholder, se maneja en drawDataRow
            }
            
            if (header === 'TIEMPO') {
                return header; // Placeholder, se maneja en drawDataRow
            }
            
            if (header === 'TARIFA') {
                return header; // Placeholder, se maneja en drawDataRow
            }
            
            if (header === 'TOTAL') {
                return header; // Placeholder, se maneja en drawDataRow
            }
            
            return rowData[header] || '';
        }
        
        // 📋 MANEJO NORMAL PARA OTROS REPORTES
        switch (header) {
            case 'ID Empresa':
                return rowData.idEmpresa || rowData.empresaId || 'N/A';
            case 'Consultor':
                return rowData.consultor || rowData.consultorName || 'N/A';
            case 'Soporte':
                return rowData.soporte || rowData.soporteName || rowData.supportName || 'N/A';
            case 'Modulo':
                return rowData.modulo || rowData.moduloName || rowData.moduleName || 'N/A';
            case 'TIEMPO':
                const tiempo = rowData.editedTime || rowData.tiempo || rowData.hours || 0;
                return `${parseFloat(tiempo).toFixed(1)} hrs`;
            case 'TARIFA de Modulo':
                const tarifa = rowData.editedTariff || rowData.tarifa || rowData.rate || 0;
                return `$${parseFloat(tarifa).toLocaleString('es-MX')}`;
            case 'TOTAL':
                const total = rowData.editedTotal || rowData.total || 0;
                return `$${parseFloat(total).toLocaleString('es-MX', { minimumFractionDigits: 2 })}`;
            default:
                return rowData[header] || rowData[header.toLowerCase()] || '';
        }
    }

    /**
     * Determinar alineación de celda (actualizado para nuevo header)
     */
    getCellAlignment(header) {
        const rightAligned = ['TIEMPO', 'TARIFA de Modulo', 'TARIFA', 'TOTAL'];
        const centerAligned = ['ID Empresa'];
        
        if (rightAligned.includes(header)) return 'right';
        if (centerAligned.includes(header)) return 'center';
        return 'left';
    }

    /**
     * Añadir footer (replicando diseño exacto del objetivo)
     */
    addFooter(doc) {
        const pageHeight = doc.internal.pageSize.getHeight();
        const pageWidth = doc.internal.pageSize.getWidth();
        const footerY = pageHeight - 25;
        
        // Línea separadora azul (más gruesa como en el objetivo)
        doc.setDrawColor(ARVIC_COLORS.primary);
        doc.setLineWidth(1.2); // Aumentado de 0.8 a 1.2 para que coincida con el objetivo
        doc.line(PDF_CONFIG.margin, footerY - 10, pageWidth - PDF_CONFIG.margin, footerY - 10);
        
        // Texto del footer (arriba de la línea)
        doc.setFont('helvetica', 'normal');
        doc.setFontSize(8);
        doc.setTextColor(ARVIC_COLORS.textGray);
        
        // Lado izquierdo - Sistema
        doc.text('GRUPO IT ARVIC - Sistema de Gestión Empresarial', PDF_CONFIG.margin, footerY - 3);
        
        // Lado derecho - Documento generado automáticamente
        const currentDate = new Date().toLocaleDateString('es-MX', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric'
        });
        const currentTime = new Date().toLocaleTimeString('es-MX', {
            hour: '2-digit',
            minute: '2-digit',
            hour12: true
        });
        doc.text(`Documento generado automáticamente - ${currentDate}, ${currentTime}`, 
                 pageWidth - PDF_CONFIG.margin, footerY - 3, { align: 'right' });
        
        // Número de página (CENTRADO y DEBAJO de la línea azul)
        const pageNumber = doc.internal.getCurrentPageInfo().pageNumber;
        doc.text(`Página ${pageNumber}`, pageWidth / 2, footerY + 3, { align: 'center' }); // Ajustado posición
    }

    /**
     * Generar nombre de archivo
     */
    generateFileName(reportType, metadata) {
        const date = new Date();
        const dateStr = date.toISOString().split('T')[0];
        const timeStr = date.toTimeString().split(' ')[0].replace(/:/g, '');
        
        const reportNames = {
            'pago-consultor-general': 'ReportePagoGeneral',
            'pago-consultor-especifico': 'ReportePagoConsultor',
            'cliente-soporte': 'ReporteSoporteCliente',
            'remanente': 'ReporteRemanente',
            'proyecto-general': 'ReporteProyectoGeneral',
            'proyecto-cliente': 'ReporteProyectoCliente',
            'proyecto-consultor': 'ReporteProyectoConsultor'
        };
        
        const baseName = reportNames[reportType] || 'ReporteARVIC';
        return `${baseName}_${dateStr}_${timeStr}.pdf`;
    }

    /**
     * FUNCIÓN NUEVA: Transformar datos de remanente para estructura de PDF
     * Convierte la estructura anidada en estructura plana como la vista previa
     */
    transformRemanenteDataForPDF(editableData) {
        console.log('🔄 Transformando datos separando soportes y proyectos...');
        
        if (!editableData || Object.keys(editableData).length === 0) {
            return { soportes: [], proyectos: [] };
        }
        
        const soporteData = [];
        const proyectoData = [];
        
        Object.values(editableData).forEach((row, index) => {
            if (!row || typeof row !== 'object') return;
            
            // Filtrar fila de totales
            if (row['posicion_0'] === 'TOTALES') return;
            
            console.log(`Fila ${index}: type="${row.type}", projectName="${row.projectName}"`);

            // ✅ SEPARAR POR TIPO
            if (row.type === 'project') {
                console.log(`✅ Procesando proyecto en transformación:`, {
                    projectName: row.projectName,
                    moduleName: row.moduleName,
                    totalHours: row.totalHours,
                    tarifa: row.editedTariff,
                    total: row.editedTotal,
                    todasLasKeys: Object.keys(row)
                });

                // Es un proyecto - solo tiene totales
                proyectoData.push({
                    projectName: row.projectName || 'Proyecto Sin Nombre',
                    moduleName: row.moduleName || 'Módulo Sin Nombre',
                    totalHours: parseFloat(row.totalHours || row.editedTime || 0),
                    tarifa: parseFloat(row.editedTariff || row.tarifa || 0),        
                    total: parseFloat(row.editedTotal || row.total || 0)            
                });
            } else {
                // Es un soporte - tiene estructura de semanas
                const flatRow = {
                    totalHoras: parseFloat(row['posicion_0'] || row.totalHoras || 0)
                };
                
                // Mapear semanas (solo para soportes)
                for (let semana = 1; semana <= 5; semana++) {
                    const baseIndex = (semana - 1) * 4 + 1;
                    
                    const modulo = row[`posicion_${baseIndex}`] || '-';
                    const tiempo = row[`posicion_${baseIndex + 1}`] || '0.0';
                    const tarifa = row[`posicion_${baseIndex + 2}`] || '$0';
                    const total = row[`posicion_${baseIndex + 3}`] || '$0.00';
                    
                    flatRow[`modulo${semana}`] = modulo;
                    flatRow[`tiempo${semana}`] = tiempo === '' ? '0.0' : tiempo;
                    flatRow[`tarifa${semana}`] = tarifa === '' ? '$0' : tarifa;
                    flatRow[`total${semana}`] = total;
                }
                
                soporteData.push(flatRow);
            }
        });
        
        console.log(`✅ Transformación completa:`, {
            soportes: soporteData.length,
            proyectos: proyectoData.length
        });
        
        return {
            soportes: soporteData,
            proyectos: proyectoData
        };
    }

    /**
     * FUNCIÓN NUEVA: drawDataRow especializada para remanente
     */
    drawRemanenteDataRow(doc, rowData, headers, columnWidths, y, rowIndex) {
        let currentX = PDF_CONFIG.margin;
        const rowHeight = 18; // Altura fija más generosa para remanente
        
        // Fondo alternado
        if (rowIndex % 2 === 0) {
            doc.setFillColor(ARVIC_COLORS.lightGray);
            doc.rect(PDF_CONFIG.margin, y, columnWidths.reduce((a, b) => a + b, 0), rowHeight, 'F');
        }
        
        // Configurar texto
        doc.setFont('helvetica', 'normal');
        doc.setFontSize(8); // Fuente más pequeña para más datos
        doc.setTextColor(ARVIC_COLORS.black);
        
        let headerIndex = 0;
        
        // Primera columna: Total de Horas
        const totalHoras = parseFloat(rowData.totalHoras || 0).toFixed(1);
        
        doc.setLineWidth(0.2);
        doc.setDrawColor(200, 200, 200);
        doc.rect(currentX, y, columnWidths[0], rowHeight);
        
        doc.setFont('helvetica', 'bold');
        doc.text(`${totalHoras} hrs`, currentX + columnWidths[0]/2, y + rowHeight/2 + 2, { align: 'center' });
        
        currentX += columnWidths[0];
        headerIndex++;
        
        // Detectar número de semanas
        const remainingHeaders = headers.length - 1;
        const numberOfWeeks = remainingHeaders / 4;
        
        // Dibujar datos para cada semana
        for (let semana = 1; semana <= numberOfWeeks; semana++) {
            doc.setFont('helvetica', 'normal');
            
            // MODULO
            const modulo = rowData[`modulo${semana}`] || '-';
            doc.rect(currentX, y, columnWidths[headerIndex], rowHeight);
            doc.text(modulo, currentX + 2, y + rowHeight/2 + 2);
            currentX += columnWidths[headerIndex];
            headerIndex++;
            
            // TIEMPO
            const tiempo = parseFloat(rowData[`tiempo${semana}`] || 0).toFixed(1);
            doc.rect(currentX, y, columnWidths[headerIndex], rowHeight);
            doc.text(`${tiempo} hrs`, currentX + columnWidths[headerIndex]/2, y + rowHeight/2 + 2, { align: 'center' });
            currentX += columnWidths[headerIndex];
            headerIndex++;
            
            // TARIFA
            const tarifa = parseFloat(rowData[`tarifa${semana}`] || 0);
            doc.rect(currentX, y, columnWidths[headerIndex], rowHeight);
            doc.text(`$${tarifa.toLocaleString('es-MX')}`, currentX + columnWidths[headerIndex]/2, y + rowHeight/2 + 2, { align: 'center' });
            currentX += columnWidths[headerIndex];
            headerIndex++;
            
            // TOTAL
            const total = parseFloat(rowData[`total${semana}`] || 0);
            doc.rect(currentX, y, columnWidths[headerIndex], rowHeight);
            doc.setFont('helvetica', 'bold');
            doc.text(`$${total.toLocaleString('es-MX')}`, currentX + columnWidths[headerIndex]/2, y + rowHeight/2 + 2, { align: 'center' });
            doc.setFont('helvetica', 'normal');
            currentX += columnWidths[headerIndex];
            headerIndex++;
        }
        
        return rowHeight;
    }

    /**
     * NUEVA FUNCIÓN: Generar reporte remanente en múltiples páginas
     * Página 1: Total + Semanas 1-2
     * Página 2: Total + Semanas 3-4  
     * Página 3: Total + Semana 5 + Totales
     */
    generateRemanenteMultiPageReport(doc, soporteData, config, startY, proyectoData = []) {
        console.log('📄 Generando reporte en 3 páginas...');
        console.log('🔍 DEBUG - generateRemanenteMultiPageReport iniciado');
        console.log('📊 Soportes recibidos:', soporteData.length);
        console.log('📁 Proyectos recibidos:', proyectoData.length);
        console.log('📁 Datos de proyectos:', proyectoData);
        
        const pageWidth = doc.internal.pageSize.getWidth();
        const tableWidth = pageWidth - (PDF_CONFIG.margin * 2);
        const bottomMargin = 50;
        
        // Definición de páginas
        const pages = [
            { pageNum: 1, weeks: [1, 2], title: 'Semanas 1-2' },
            { pageNum: 2, weeks: [3, 4], title: 'Semanas 3-4' },
            { pageNum: 3, weeks: [5], title: 'Semana 5' }
        ];
        
        // Generar cada página
        pages.forEach((pageConfig, pageIndex) => {
            if (pageIndex > 0) {
                doc.addPage();
                this.addCompleteHeader(doc, config, config.metadata || {});
            }
            
            console.log(`📄 Generando página ${pageConfig.pageNum}: ${pageConfig.title}`);
            
            // Calcular anchos de columna para esta página
            const numWeeks = pageConfig.weeks.length;
            const columnWidths = this.calculateRemanenteColumnWidths(tableWidth, numWeeks);
            
            // Generar estructura de headers
            const headerStructure = {
                totalWeeks: numWeeks,
                weeks: pageConfig.weeks,
                pageNum: pageConfig.pageNum,
                totalPages: pages.length
            };
            
            // Dibujar headers
            const headerHeight = this.drawRemanenteHeadersMultiPage(
                doc, 
                headerStructure, 
                columnWidths, 
                startY
            );
            
            // Dibujar filas de datos
            let currentY = startY + headerHeight + 2;

            soporteData.forEach((row, rowIndex) => {
                // Verificar si necesitamos nueva página (solo si hay muchas filas)
                if (currentY + 18 > doc.internal.pageSize.getHeight() - bottomMargin) {
                    this.addFooter(doc);
                    doc.addPage();
                    this.addCompleteHeader(doc, config, config.metadata || {});
                    currentY = startY;
                    
                    // Re-dibujar headers
                    this.drawRemanenteHeadersMultiPage(
                        doc, 
                        headerStructure, 
                        columnWidths, 
                        currentY
                    );
                    currentY += headerHeight + 2;
                }
                
                // Dibujar fila con solo las semanas de esta página
                this.drawRemanenteDataRowMultiPage(
                    doc, 
                    row, 
                    pageConfig.weeks, 
                    columnWidths, 
                    currentY, 
                    rowIndex
                );
                
                currentY += 15;
            });
            
            // Si es la última página, agregar totales
            if (pageConfig.pageNum === pages.length) {
                currentY += 10;
                
                if (currentY + 40 > doc.internal.pageSize.getHeight() - bottomMargin) {
                    this.addFooter(doc);
                    doc.addPage();
                    currentY = 30;
                }
            }
            
            // Agregar footer con número de página
            this.addFooterWithPageNumber(doc, pageConfig.pageNum, pages.length);

            // Si es la última página, agregar totales Y proyectos
            if (pageConfig.pageNum === pages.length) {
                console.log('✅ Última página detectada');
                currentY += 10;
                
                if (currentY + 40 > doc.internal.pageSize.getHeight() - bottomMargin) {
                    this.addFooter(doc);
                    doc.addPage();
                    currentY = 30;
                }
                
                this.addRemanenteTotals(doc, soporteData, pageWidth, currentY);
                console.log('✅ Totales de soportes dibujados');
                
                // Verificar proyectos
                console.log('🔍 Verificando proyectos...');
                console.log('proyectoData:', proyectoData);
                console.log('proyectoData existe?', !!proyectoData);
                console.log('proyectoData.length:', proyectoData?.length);
                
                if (proyectoData && proyectoData.length > 0) {
                    console.log('✅ ENTRANDO a dibujar sección de proyectos');
                    currentY += 50;
                    
                    if (currentY + 60 > doc.internal.pageSize.getHeight() - bottomMargin) {
                        this.addFooter(doc);
                        doc.addPage();
                        this.addCompleteHeader(doc, config, config.metadata || {});
                        currentY = startY;
                    }
                    
                    this.drawProyectosSection(doc, proyectoData, pageWidth, currentY);
                    console.log('✅ Sección de proyectos dibujada');
                } else {
                    console.log('❌ NO se dibuja sección de proyectos porque:');
                    console.log('   - proyectoData es null/undefined?', !proyectoData);
                    console.log('   - proyectoData está vacío?', proyectoData?.length === 0);
                }
            }
        });
    }

    /**
     * Calcular anchos de columna para remanente según número de semanas
     */
    calculateRemanenteColumnWidths(tableWidth, numWeeks) {
        const totalColumnWidth = tableWidth * 0.18; // 18% para Total de Horas
        const weekAreaWidth = tableWidth * 0.82;    // 82% para las semanas
        const weekColumnWidth = weekAreaWidth / numWeeks;
        const subColumnWidth = weekColumnWidth / 4; // 4 subcolomnas por semana
        
        const widths = [totalColumnWidth];
        
        // Agregar anchos para cada semana (4 subcolomnas por semana)
        for (let i = 0; i < numWeeks; i++) {
            widths.push(subColumnWidth, subColumnWidth, subColumnWidth, subColumnWidth);
        }
        
        console.log(`📏 Anchos calculados para ${numWeeks} semanas:`, widths);
        return widths;
    }

    /**
     * Dibujar headers jerárquicos para páginas específicas
     */
    drawRemanenteHeadersMultiPage(doc, headerStructure, columnWidths, y) {
        let currentX = PDF_CONFIG.margin;
        const mainHeaderHeight = 12;
        const subHeaderHeight = 10;
        
        const totalColumnWidth = columnWidths[0];
        const remainingWidth = columnWidths.slice(1).reduce((a, b) => a + b, 0);
        const weekColumnWidth = remainingWidth / headerStructure.totalWeeks;
        
        // Configurar fuente
        doc.setFont('helvetica', 'bold');
        doc.setFontSize(10);
        doc.setTextColor(255, 255, 255);
        
        // Columna "Total de Horas"
        doc.setFillColor(25, 118, 210);
        doc.rect(currentX, y, totalColumnWidth, mainHeaderHeight + subHeaderHeight, 'F');
        doc.rect(currentX, y, totalColumnWidth, mainHeaderHeight + subHeaderHeight);
        doc.text('Total de Horas', currentX + totalColumnWidth/2, y + (mainHeaderHeight + subHeaderHeight)/2 + 3, { align: 'center' });
        currentX += totalColumnWidth;
        
        // Headers de semanas (solo las de esta página)
        headerStructure.weeks.forEach(weekNum => {
            doc.setFillColor(25, 118, 210);
            doc.rect(currentX, y, weekColumnWidth, mainHeaderHeight, 'F');
            doc.rect(currentX, y, weekColumnWidth, mainHeaderHeight);
            doc.text(`Semana ${weekNum}`, currentX + weekColumnWidth/2, y + mainHeaderHeight/2 + 3, { align: 'center' });
            
            const subColumnWidth = weekColumnWidth / 4;
            let subX = currentX;
            
            ['MODULO', 'TIEMPO', 'TARIFA', 'TOTAL'].forEach(subHeader => {
                doc.setFillColor(33, 150, 243);
                doc.rect(subX, y + mainHeaderHeight, subColumnWidth, subHeaderHeight, 'F');
                doc.rect(subX, y + mainHeaderHeight, subColumnWidth, subHeaderHeight);
                
                doc.setFontSize(8);
                doc.text(subHeader, subX + subColumnWidth/2, y + mainHeaderHeight + subHeaderHeight/2 + 2, { align: 'center' });
                
                subX += subColumnWidth;
            });
            
            currentX += weekColumnWidth;
        });
        
        return mainHeaderHeight + subHeaderHeight;
    }

    /**
     * Dibujar fila de datos con solo las semanas especificadas
     */
    drawRemanenteDataRowMultiPage(doc, rowData, weeks, columnWidths, y, rowIndex) {
        let currentX = PDF_CONFIG.margin;
        const rowHeight = 15;
        
        // Fondo alternado
        if (rowIndex % 2 === 0) {
            doc.setFillColor(ARVIC_COLORS.lightGray);
            doc.rect(PDF_CONFIG.margin, y, columnWidths.reduce((a, b) => a + b, 0), rowHeight, 'F');
        }
        
        // Configurar texto
        doc.setFont('helvetica', 'normal');
        doc.setFontSize(9);
        doc.setTextColor(ARVIC_COLORS.black);
        doc.setLineWidth(0.2);
        doc.setDrawColor(200, 200, 200);
        
        let columnIndex = 0;
        
        // Columna 1: Total de Horas
        const totalHoras = parseFloat(rowData.totalHoras || 0).toFixed(1);
        doc.rect(currentX, y, columnWidths[columnIndex], rowHeight);
        doc.setFont('helvetica', 'bold');
        doc.text(`${totalHoras} hrs`, currentX + columnWidths[columnIndex]/2, y + rowHeight/2 + 2, { align: 'center' });
        doc.setFont('helvetica', 'normal');
        currentX += columnWidths[columnIndex++];
        
        // Datos de las semanas especificadas
        weeks.forEach(semana => {
            // MODULO
            const modulo = rowData[`modulo${semana}`] || '-';
            doc.rect(currentX, y, columnWidths[columnIndex], rowHeight);
            doc.setFontSize(8);
            doc.text(modulo, currentX + columnWidths[columnIndex]/2, y + rowHeight/2 + 2, { align: 'center' });
            doc.setFontSize(9);
            currentX += columnWidths[columnIndex++];
            
            // TIEMPO
            const tiempo = rowData[`tiempo${semana}`] || '0.0';
            doc.rect(currentX, y, columnWidths[columnIndex], rowHeight);
            doc.text(tiempo === '0.0' ? '-' : `${tiempo}h`, currentX + columnWidths[columnIndex]/2, y + rowHeight/2 + 2, { align: 'center' });
            currentX += columnWidths[columnIndex++];
            
            // TARIFA
            const tarifa = rowData[`tarifa${semana}`] || '$0';
            doc.rect(currentX, y, columnWidths[columnIndex], rowHeight);
            doc.text(tarifa === '$0' ? '-' : tarifa, currentX + columnWidths[columnIndex]/2, y + rowHeight/2 + 2, { align: 'center' });
            currentX += columnWidths[columnIndex++];
            
            // TOTAL
            const total = rowData[`total${semana}`] || '$0.00';
            doc.rect(currentX, y, columnWidths[columnIndex], rowHeight);
            doc.setFont('helvetica', 'bold');
            doc.setTextColor(0, 100, 0);
            doc.text(total, currentX + columnWidths[columnIndex]/2, y + rowHeight/2 + 2, { align: 'center' });
            doc.setTextColor(0, 0, 0);
            doc.setFont('helvetica', 'normal');
            currentX += columnWidths[columnIndex++];
        });
        
        return rowHeight;
    }

    /**
     * Agregar totales consolidados al final del reporte
     */
    addRemanenteTotals(doc, data, pageWidth, y) {
        console.log('📊 Calculando totales consolidados...');
        
        let totalHoras = 0;
        let totalMonto = 0;
        
        data.forEach(row => {
            totalHoras += parseFloat(row.totalHoras || 0);
            
            // Sumar totales de todas las semanas
            for (let semana = 1; semana <= 5; semana++) {
                const total = row[`total${semana}`] || '$0.00';
                const numericTotal = parseFloat(total.replace(/[$,]/g, ''));
                totalMonto += numericTotal;
            }
        });
        
        // Dibujar sección de totales
        doc.setDrawColor(25, 118, 210);
        doc.setLineWidth(0.5);
        doc.line(PDF_CONFIG.margin, y, pageWidth - PDF_CONFIG.margin, y);
        
        y += 8;
        
        doc.setFont('helvetica', 'bold');
        doc.setFontSize(13);
        doc.setTextColor(ARVIC_COLORS.primary);
        
        doc.text(`Total Horas: ${totalHoras.toFixed(1)} hrs`, 
                pageWidth - PDF_CONFIG.margin, y, { align: 'right' });
        
        doc.text(`Total Monto: $${totalMonto.toLocaleString('es-MX', { minimumFractionDigits: 2 })}`, 
                pageWidth - PDF_CONFIG.margin, y + 10, { align: 'right' });
        
        console.log(`✅ Totales: ${totalHoras.toFixed(1)} hrs, $${totalMonto.toFixed(2)}`);
    }

    /**
     * Agregar footer con número de página
     */
    addFooterWithPageNumber(doc, currentPage, totalPages) {
        const pageHeight = doc.internal.pageSize.getHeight();
        const pageWidth = doc.internal.pageSize.getWidth();
        const footerY = pageHeight - 15;
        
        // Línea divisoria
        doc.setDrawColor(25, 118, 210);
        doc.setLineWidth(0.5);
        doc.line(PDF_CONFIG.margin, footerY - 5, pageWidth - PDF_CONFIG.margin, footerY - 5);
        
        // Texto del footer
        doc.setFont('helvetica', 'normal');
        doc.setFontSize(9);
        doc.setTextColor(100, 100, 100);
        
        doc.text('GRUPO IT ARVIC - Sistema de Gestión Empresarial', 
                PDF_CONFIG.margin, footerY);
        
        const currentDate = new Date().toLocaleDateString('es-MX', {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
        
        doc.text(`Documento generado automáticamente - ${currentDate}`, 
                PDF_CONFIG.margin, footerY + 6);
        
        // Número de página
        doc.setFont('helvetica', 'bold');
        doc.text(`Página ${currentPage} de ${totalPages}`, 
                pageWidth - PDF_CONFIG.margin, footerY, { align: 'right' });
    }

    /**
     * NUEVA FUNCIÓN: Dibujar sección de proyectos en el PDF
     */
    drawProyectosSection(doc, proyectoData, pageWidth, startY) {    
        console.log('🎨 EJECUTANDO drawProyectosSection');
        console.log('📁 proyectoData recibido:', proyectoData);
        console.log('📏 pageWidth:', pageWidth);
        console.log('📍 startY:', startY);

        proyectoData.forEach((proyecto, i) => {
            console.log(`Proyecto ${i}:`, {
                projectName: proyecto.projectName,
                moduleName: proyecto.moduleName,
                totalHours: proyecto.totalHours,
                tarifa: proyecto.tarifa,
                total: proyecto.total
            });
        });
        
        if (!proyectoData || proyectoData.length === 0) {
            console.error('❌ proyectoData está vacío en drawProyectosSection');
            return;
        }

        console.log('📁 Dibujando sección de proyectos:', proyectoData.length);
        
        let currentY = startY;
        const margin = PDF_CONFIG.margin;
        const tableWidth = pageWidth - (margin * 2);
        
        // Título de sección
        doc.setFillColor(25, 118, 210);
        doc.rect(margin, currentY, tableWidth, 10, 'F');
        doc.setFont('helvetica', 'bold');
        doc.setFontSize(12);
        doc.setTextColor(255, 255, 255);
        doc.text('PROYECTOS DEL CLIENTE', margin + 5, currentY + 7);
        currentY += 12;
        
        // Headers de tabla de proyectos
        const colWidths = [
            tableWidth * 0.30,  // Proyecto
            tableWidth * 0.30,  // Módulo
            tableWidth * 0.15,  // Total Horas
            tableWidth * 0.10,  // Tarifa
            tableWidth * 0.15   // Total
        ];
        
        doc.setFillColor(33, 150, 243);
        let currentX = margin;
        
        const headers = ['Proyecto', 'Módulo', 'Total Horas', 'Tarifa', 'Total'];
        headers.forEach((header, index) => {
            // 1. Dibujar fondo azul
            doc.setFillColor(33, 150, 243);
            doc.rect(currentX, currentY, colWidths[index], 10, 'F');
            
            // 2. Dibujar borde
            doc.setDrawColor(33, 150, 243);
            doc.setLineWidth(0.5);
            doc.rect(currentX, currentY, colWidths[index], 10);
            
            // 3. Configurar texto DENTRO del loop (no antes)
            doc.setFont('helvetica', 'bold');
            doc.setFontSize(9);
            doc.setTextColor(255, 255, 255);  // Blanco
            
            // 4. Dibujar texto
            const textX = currentX + colWidths[index]/2;
            const textY = currentY + 7;
            doc.text(header, textX, textY, { align: 'center' });
            
            console.log(`Header "${header}" dibujado en (${textX}, ${textY})`);
            
            currentX += colWidths[index];
        });

        // 5. CRÍTICO: Resetear colores antes de continuar
        doc.setTextColor(0, 0, 0);  // Negro para datos
        doc.setDrawColor(200, 200, 200);  // Gris para bordes de datos
        doc.setLineWidth(0.2);

        currentY += 10;
        
        // Agrupar por proyecto
        const projectGroups = {};
        proyectoData.forEach(row => {
            const projectKey = row.projectName;
            if (!projectGroups[projectKey]) {
                projectGroups[projectKey] = [];
            }
            projectGroups[projectKey].push(row);
        });
        
        // Dibujar datos por proyecto
        doc.setTextColor(0, 0, 0);
        doc.setFont('helvetica', 'normal');
        doc.setFontSize(9);
        
        let totalProjectHours = 0;
        let totalProjectAmount = 0;
        
        Object.entries(projectGroups).forEach(([projectName, modules]) => {
            modules.forEach((row, index) => {
                // Fondo alternado
                if (index % 2 === 0) {
                    doc.setFillColor(245, 245, 245);
                    doc.rect(margin, currentY, tableWidth, 8, 'F');
                }
                
                currentX = margin;
                
                // Proyecto (solo en primera fila del grupo)
                doc.setFont('helvetica', index === 0 ? 'bold' : 'normal');
                doc.rect(currentX, currentY, colWidths[0], 8);
                if (index === 0) {
                    doc.text(projectName, currentX + 2, currentY + 5.5);
                }
                currentX += colWidths[0];
                
                // Módulo
                doc.setFont('helvetica', 'normal');
                doc.rect(currentX, currentY, colWidths[1], 8);
                doc.text(row.moduleName, currentX + 2, currentY + 5.5);
                currentX += colWidths[1];

                // Total Horas
                doc.rect(currentX, currentY, colWidths[2], 8);
                doc.text(`${row.totalHours.toFixed(1)} hrs`, currentX + colWidths[2]/2, currentY + 5.5, { align: 'center' });
                currentX += colWidths[2];

                // Tarifa
                doc.rect(currentX, currentY, colWidths[3], 8);
                doc.text(`$${row.tarifa.toLocaleString('es-MX')}`, currentX + colWidths[3]/2, currentY + 5.5, { align: 'center' });
                currentX += colWidths[3];

                // Total
                doc.rect(currentX, currentY, colWidths[4], 8);
                doc.setFont('helvetica', 'bold');
                doc.setTextColor(0, 100, 0);
                doc.text(`$${row.total.toLocaleString('es-MX', { minimumFractionDigits: 2 })}`, currentX + colWidths[4]/2, currentY + 5.5, { align: 'center' });
                doc.setTextColor(0, 0, 0);
                doc.setFont('helvetica', 'normal');
                
                totalProjectHours += row.totalHours;
                totalProjectAmount += row.total;
                
                currentY += 8;
            });
        });
        
        // Totales de proyectos
        currentY += 2;
        doc.setFillColor(220, 220, 220);
        doc.rect(margin, currentY, tableWidth, 10, 'F');
        doc.rect(margin, currentY, tableWidth, 10);
        
        doc.setFont('helvetica', 'bold');
        doc.setFontSize(10);
        doc.setTextColor(0, 0, 0);
        
        currentX = margin;
        doc.text('TOTAL PROYECTOS', currentX + 5, currentY + 7);
        currentX += colWidths[0] + colWidths[1];
        doc.text(`${totalProjectHours.toFixed(1)} hrs`, currentX + colWidths[2]/2, currentY + 7, { align: 'center' });
        currentX += colWidths[2] + colWidths[3];
        doc.text(`$${totalProjectAmount.toLocaleString('es-MX', { minimumFractionDigits: 2 })}`, currentX + colWidths[4]/2, currentY + 7, { align: 'center' });
        
        console.log(`✅ Sección de proyectos dibujada: ${proyectoData.length} módulos, $${totalProjectAmount.toFixed(2)}`);
    }
}

/**
 * FUNCIONES NUEVAS PARA REMANENTE
 */

// Función 1: Extraer datos editables correctos
/**
 * Extraer datos editables correctos PRESERVANDO proyectos
 */
function extraerDatosEditablesCorrectos() {
    console.log('🔧 Extrayendo datos con input.value (preservando proyectos)...');
    
    const tabla = document.querySelector('#reportPreviewPanel table');
    if (!tabla) return null;
    
    // 1. GUARDAR proyectos existentes antes de sobrescribir
    const proyectosExistentes = [];
    if (editablePreviewData) {
        Object.values(editablePreviewData).forEach(row => {
            if (row.type === 'project') {
                proyectosExistentes.push(row);
            }
        });
    }
    
    console.log(`💾 Proyectos guardados antes de extraer: ${proyectosExistentes.length}`);
    console.log('📁 Proyectos encontrados:', proyectosExistentes);
    
    // 2. EXTRAER datos de la tabla (solo soportes visibles)
    const filas = Array.from(tabla.querySelectorAll('tbody tr'));
    const datosCorrectos = {};
    
    filas.forEach((fila, filaIndex) => {
        const celdas = Array.from(fila.querySelectorAll('td'));
        const objeto = {};
        
        celdas.forEach((celda, celdaIndex) => {
            const input = celda.querySelector('input');
            let valor = input ? input.value : celda.textContent.trim();
            objeto[`posicion_${celdaIndex}`] = valor;
        });
        
        datosCorrectos[filaIndex] = objeto;
    });
    
    // 3. RE-AGREGAR proyectos al final
    let siguienteIndice = Object.keys(datosCorrectos).length;
    proyectosExistentes.forEach(proyecto => {
        datosCorrectos[siguienteIndice] = proyecto;
        siguienteIndice++;
    });
    
    console.log(`✅ Datos finales: ${Object.keys(datosCorrectos).length} filas (${proyectosExistentes.length} proyectos preservados)`);
    
    window.editablePreviewData = datosCorrectos;
    return datosCorrectos;
}

// Función 2: Generar headers jerárquicos
ARVICPDFExporter.prototype.generateRemanenteHeaders = function(editableData) {
    console.log('📋 Generando headers jerárquicos para 5 semanas...');
    
    const headerStructure = {
        totalWeeks: 5,
        mainHeaders: ['Total de Horas'],
        subHeaders: ['Total de Horas']
    };
    
    for (let semana = 1; semana <= 5; semana++) {
        headerStructure.mainHeaders.push(`Semana ${semana}`);
        headerStructure.subHeaders.push('MODULO', 'TIEMPO', 'TARIFA', 'TOTAL');
    }
    
    return headerStructure;
};

// Función 3: Dibujar headers jerárquicos
ARVICPDFExporter.prototype.drawRemanenteHeaders = function(doc, headerStructure, columnWidths, y) {
    let currentX = 20;
    const mainHeaderHeight = 12;
    const subHeaderHeight = 10;
    
    const totalColumnWidth = columnWidths[0];
    const remainingWidth = columnWidths.slice(1).reduce((a, b) => a + b, 0);
    const weekColumnWidth = remainingWidth / headerStructure.totalWeeks;
    
    // Headers principales
    doc.setFillColor(25, 118, 210);
    doc.setFont('helvetica', 'bold');
    doc.setFontSize(10);
    doc.setTextColor(255, 255, 255);
    
    // Total de Horas
    doc.rect(currentX, y, totalColumnWidth, mainHeaderHeight + subHeaderHeight, 'F');
    doc.rect(currentX, y, totalColumnWidth, mainHeaderHeight + subHeaderHeight);
    doc.text('Total de Horas', currentX + totalColumnWidth/2, y + (mainHeaderHeight + subHeaderHeight)/2 + 3, { align: 'center' });
    currentX += totalColumnWidth;
    
    // Headers de semanas
    for (let semana = 1; semana <= headerStructure.totalWeeks; semana++) {
        doc.setFillColor(25, 118, 210);
        doc.rect(currentX, y, weekColumnWidth, mainHeaderHeight, 'F');
        doc.rect(currentX, y, weekColumnWidth, mainHeaderHeight);
        doc.text(`Semana ${semana}`, currentX + weekColumnWidth/2, y + mainHeaderHeight/2 + 3, { align: 'center' });
        
        const subColumnWidth = weekColumnWidth / 4;
        let subX = currentX;
        
        ['MODULO', 'TIEMPO', 'TARIFA', 'TOTAL'].forEach(subHeader => {
            doc.setFillColor(33, 150, 243);
            doc.rect(subX, y + mainHeaderHeight, subColumnWidth, subHeaderHeight, 'F');
            doc.rect(subX, y + mainHeaderHeight, subColumnWidth, subHeaderHeight);
            
            doc.setFontSize(8);
            doc.text(subHeader, subX + subColumnWidth/2, y + mainHeaderHeight + subHeaderHeight/2 + 2, { align: 'center' });
            
            subX += subColumnWidth;
        });
        
        currentX += weekColumnWidth;
    }
    
    return mainHeaderHeight + subHeaderHeight;
};

// Función 4: Dibujar filas de datos para remanente
ARVICPDFExporter.prototype.drawRemanenteDataRow = function(doc, rowData, headers, columnWidths, y, rowIndex) {
    let currentX = 20;
    const rowHeight = 18;
    
    if (rowIndex % 2 === 0) {
        doc.setFillColor(245, 245, 245);
        doc.rect(20, y, columnWidths.reduce((a, b) => a + b, 0), rowHeight, 'F');
    }
    
    doc.setFont('helvetica', 'normal');
    doc.setFontSize(8);
    doc.setTextColor(0, 0, 0);
    
    // Total de Horas
    const totalHoras = parseFloat(rowData.totalHoras || 0).toFixed(1);
    doc.rect(currentX, y, columnWidths[0], rowHeight);
    doc.setFont('helvetica', 'bold');
    doc.text(`${totalHoras} hrs`, currentX + columnWidths[0]/2, y + rowHeight/2 + 2, { align: 'center' });
    currentX += columnWidths[0];
    
    let columnIndex = 1;
    doc.setFont('helvetica', 'normal');
    
    for (let semana = 1; semana <= 5; semana++) {
        // MODULO
        const modulo = rowData[`modulo${semana}`] || '-';
        doc.rect(currentX, y, columnWidths[columnIndex], rowHeight);
        if (modulo !== '-' && modulo !== '') {
            doc.setFontSize(7);
            doc.text(modulo, currentX + 1, y + rowHeight/2 + 2);
            doc.setFontSize(8);
        } else {
            doc.text('-', currentX + columnWidths[columnIndex]/2, y + rowHeight/2 + 2, { align: 'center' });
        }
        currentX += columnWidths[columnIndex++];
        
        // TIEMPO
        const tiempo = rowData[`tiempo${semana}`] || '0.0';
        doc.rect(currentX, y, columnWidths[columnIndex], rowHeight);
        doc.text(tiempo === '0.0' ? '-' : `${tiempo}h`, currentX + columnWidths[columnIndex]/2, y + rowHeight/2 + 2, { align: 'center' });
        currentX += columnWidths[columnIndex++];
        
        // TARIFA
        const tarifa = rowData[`tarifa${semana}`] || '$0';
        doc.rect(currentX, y, columnWidths[columnIndex], rowHeight);
        doc.text(tarifa === '$0' ? '-' : `$${tarifa}`, currentX + columnWidths[columnIndex]/2, y + rowHeight/2 + 2, { align: 'center' });
        currentX += columnWidths[columnIndex++];
        
        // TOTAL
        const total = rowData[`total${semana}`] || '$0.00';
        doc.rect(currentX, y, columnWidths[columnIndex], rowHeight);
        doc.setFont('helvetica', 'bold');
        doc.setTextColor(0, 100, 0);
        doc.text(total, currentX + columnWidths[columnIndex]/2, y + rowHeight/2 + 2, { align: 'center' });
        doc.setTextColor(0, 0, 0);
        doc.setFont('helvetica', 'normal');
        currentX += columnWidths[columnIndex++];
    }
    
    return rowHeight;
};

// Crear instancia global
window.arvicPDFExporter = new ARVICPDFExporter();

/**
 * FUNCIÓN PRINCIPAL - Exportar reporte actual a PDF
 */
async function exportCurrentReportToPDF() {
    try {
        console.log('🚀 Iniciando exportación PDF del reporte actual...');
        
        // Validar que hay datos para exportar - VERSIÓN CORREGIDA
        const reportType = window.currentReportType || currentReportType;
        const previewData = window.editablePreviewData || editablePreviewData;

        console.log('🔍 Verificando datos:', {
            reportType: reportType,
            previewDataKeys: Object.keys(previewData || {}),
            globalCurrentReportType: window.currentReportType,
            globalEditablePreviewData: window.editablePreviewData
        });

        if (!reportType || !previewData || Object.keys(previewData).length === 0) {
            throw new Error('No hay datos disponibles para exportar. Asegúrate de generar la vista previa primero.');
        }
        
        // Mostrar indicador de carga en el botón
        const pdfButton = document.getElementById('exportPDFBtn');
        if (pdfButton) {
            pdfButton.classList.add('loading');
            pdfButton.disabled = true;
        }
        
        // Preparar configuración
        const report = ARVIC_REPORTS[reportType];
        const config = {
            title: report.name || 'Reporte ARVIC',
            reportType: currentReportType,
            showTotals: true
        };
        
        // Preparar datos - convertir objeto a array
        const data = Object.values(previewData);
        
        // Preparar headers
        const headers = report.structure || ['ID', 'Descripción', 'Valor'];
        
        // Preparar metadata
        const metadata = prepareMetadataForPDF();
        
        console.log('📋 Datos preparados:', {
            config: config,
            dataCount: data.length,
            headers: headers,
            metadata: metadata
        });
        
        // Exportar PDF
        await window.arvicPDFExporter.exportToPDF(config, data, headers, metadata);
        
    } catch (error) {
        console.error('❌ Error en exportación PDF:', error);
        if (window.NotificationUtils) {
            window.NotificationUtils.error(`Error al generar PDF: ${error.message}`);
        } else {
            alert(`Error al generar PDF: ${error.message}`);
        }
    } finally {
        // Restaurar botón
        const pdfButton = document.getElementById('exportPDFBtn');
        if (pdfButton) {
            pdfButton.classList.remove('loading');
            pdfButton.disabled = false;
        }
    }
}

/**
 * Preparar metadata del reporte actual
 */
function prepareMetadataForPDF() {
    const metadata = {};
    
    // Obtener información de los filtros activos
    const clientFilter = document.getElementById('clientFilter');
    const consultantFilter = document.getElementById('consultantFilter');
    const supportFilter = document.getElementById('supportTypeFilter');
    const monthFilter = document.getElementById('monthFilter');
    
    if (clientFilter?.selectedOptions[0] && clientFilter.selectedOptions[0].value !== '') {
        metadata.cliente = clientFilter.selectedOptions[0].text;
    }
    
    if (consultantFilter?.selectedOptions[0] && consultantFilter.selectedOptions[0].value !== '') {
        metadata.consultor = consultantFilter.selectedOptions[0].text;
    }
    
    if (supportFilter?.selectedOptions[0] && supportFilter.selectedOptions[0].value !== '') {
        metadata.soporte = supportFilter.selectedOptions[0].text;
    }
    
    if (monthFilter?.selectedOptions[0] && monthFilter.selectedOptions[0].value !== '') {
        metadata.mes = monthFilter.selectedOptions[0].text;
    }
    
    return metadata;
}

// ===================================================================
// FUNCIONES DE INTEGRACIÓN CON LA INTERFAZ (RESTAURADAS)
// ===================================================================

/**
 * Añadir botón PDF al panel de configuración existente
 */
function addPDFButtonToConfigPanel() {
    // Buscar el contenedor de botones existente
    const buttonContainer = document.querySelector('.config-actions');
    
    if (buttonContainer) {
        // Verificar si el botón ya existe
        if (document.getElementById('exportPDFBtn')) {
            return; // Ya existe, no crear duplicado
        }
        
        // Crear botón PDF
        const pdfButton = document.createElement('button');
        pdfButton.className = 'btn btn-info btn-pdf';
        pdfButton.id = 'exportPDFBtn';
        pdfButton.innerHTML = '<span class="btn-icon">📄 Exportar PDF</span>';
        pdfButton.onclick = exportCurrentReportToPDF;
        pdfButton.disabled = true; // Inicialmente deshabilitado
        
        // Insertar después del botón de Excel
        const excelButton = document.getElementById('generateBtn');
        if (excelButton) {
            excelButton.parentNode.insertBefore(pdfButton, excelButton.nextSibling);
        } else {
            buttonContainer.appendChild(pdfButton);
        }
        
        console.log('✅ Botón PDF añadido al panel de configuración');
    }
}

// Función auxiliar para verificar cuántas filas caben por página
function calculateMaxRowsPerPage() {
    const pageHeight = 210; // A4 landscape
    const usableHeight = pageHeight - PDF_CONFIG_OPTIMIZED.headerHeight - 50; // 50 para footer
    const averageRowHeight = 12; // Altura promedio por fila
    
    return Math.floor(usableHeight / averageRowHeight);
}

console.log(`📋 Filas estimadas por página: ${calculateMaxRowsPerPage()}`);

/**
 * Actualizar estado del botón PDF (habilitar/deshabilitar)
 */
function updatePDFButtonState(enabled) {
    const pdfButton = document.getElementById('exportPDFBtn');
    if (pdfButton) {
        pdfButton.disabled = !enabled;
        console.log(`🔄 Botón PDF ${enabled ? 'habilitado' : 'deshabilitado'}`);
    }
}

function debugRemanenteData() {
    console.log('🔍 DEBUGGING - Estructura de datos remanente');
    
    if (!editablePreviewData || Object.keys(editablePreviewData).length === 0) {
        console.error('❌ No hay datos en editablePreviewData');
        return;
    }
    
    const firstRow = Object.values(editablePreviewData)[0];
    console.log('📊 Primera fila de datos:', firstRow);
    
    // Verificar estructura de semanas
    const semanaKeys = Object.keys(firstRow).filter(key => key.startsWith('semana'));
    console.log('📅 Semanas encontradas:', semanaKeys);
    
    semanaKeys.forEach(semanaKey => {
        console.log(`📅 ${semanaKey}:`, firstRow[semanaKey]);
    });
    
    // Verificar total de horas
    console.log('📊 Total de horas:', firstRow.totalHoras);
    
    return {
        totalRows: Object.keys(editablePreviewData).length,
        semanas: semanaKeys.length,
        estructura: firstRow
    };
}

function debugRemanenteStructure() {
    console.log('🔍 DEBUGGING COMPLETO - Estructura Remanente');
    
    if (!window.editablePreviewData) {
        console.error('❌ No hay editablePreviewData disponible');
        return;
    }
    
    const data = window.editablePreviewData;
    const firstRow = Object.values(data)[0];
    
    console.log('📊 Primera fila completa:', firstRow);
    
    if (firstRow && firstRow.monthStructure) {
        console.log('📅 Estructura de mes:', firstRow.monthStructure);
        
        const semanaKeys = Object.keys(firstRow).filter(key => key.startsWith('semana'));
        console.log('📅 Semanas encontradas:', semanaKeys);
        
        semanaKeys.forEach(key => {
            console.log(`📅 ${key}:`, firstRow[key]);
        });
        
        // Probar transformación
        const transformed = transformRemanenteDataForPDF(data);
        console.log('🔄 Resultado de transformación:', transformed);
        
        return {
            originalData: Object.keys(data).length,
            semanas: semanaKeys.length,
            transformedHeaders: transformed.headers.length,
            transformedData: transformed.data.length
        };
    } else {
        console.error('❌ No se encontró monthStructure en los datos');
        return null;
    }
}

// ===================================================================
// HOOKS PARA INTEGRACIÓN AUTOMÁTICA (CRÍTICOS PARA EL FUNCIONAMIENTO)
// ===================================================================

/**
 * Hook en la función de configuración existente
 */
const originalShowConfigPanel = window.showConfigPanel;
if (originalShowConfigPanel) {
    window.showConfigPanel = function(...args) {
        const result = originalShowConfigPanel.apply(this, args);
        setTimeout(addPDFButtonToConfigPanel, 100); // Añadir botón después de crear panel
        return result;
    };
}

/**
 * Hook en la validación de filtros existente
 */
const originalValidateRequiredFilters = window.validateRequiredFilters;
if (originalValidateRequiredFilters) {
    window.validateRequiredFilters = function(...args) {
        const result = originalValidateRequiredFilters.apply(this, args);
        
        // Obtener estado actual de los botones
        const generateBtn = document.getElementById('generateBtn');
        const enabled = generateBtn && !generateBtn.disabled;
        
        // Actualizar botón PDF
        updatePDFButtonState(enabled);
        
        return result;
    };
}

/**
 * Hook en la generación de vista previa
 */
const originalGenerateReportPreview = window.generateReportPreview;
if (originalGenerateReportPreview) {
    window.generateReportPreview = function(...args) {
        const result = originalGenerateReportPreview.apply(this, args);
        
        // Habilitar botón PDF después de vista previa exitosa
        setTimeout(() => {
            const previewPanel = document.getElementById('reportPreviewPanel');
            if (previewPanel && previewPanel.innerHTML.trim() !== '') {
                updatePDFButtonState(true);
                console.log('✅ Vista previa generada - Botón PDF habilitado');
            }
        }, 500);
        
        return result;
    };
}

// ===================================================================
// FUNCIONES GLOBALES Y DE UTILIDAD
// ===================================================================

/**
 * Función para exportar cualquier tabla HTML a PDF
 * Útil para casos especiales o futuras expansiones
 */
async function exportTableToPDF(tableElement, title = 'Reporte ARVIC', metadata = {}) {
    if (!tableElement) return;
    
    const headers = Array.from(tableElement.querySelectorAll('thead th')).map(th => th.textContent.trim());
    const rows = Array.from(tableElement.querySelectorAll('tbody tr')).map(tr => 
        Array.from(tr.querySelectorAll('td')).map(td => td.textContent.trim())
    );
    
    const config = {
        title: title,
        reportType: 'custom',
        showTotals: false
    };
    
    await window.arvicPDFExporter.exportToPDF(config, rows, headers, metadata);
}

// Funciones principales
window.exportCurrentReportToPDF = exportCurrentReportToPDF;
window.exportTableToPDF = exportTableToPDF;
window.addPDFButtonToConfigPanel = addPDFButtonToConfigPanel;
window.updatePDFButtonState = updatePDFButtonState;
window.debugRemanenteData = debugRemanenteData;
window.debugRemanenteStructure = debugRemanenteStructure;

// Inicialización automática
document.addEventListener('DOMContentLoaded', function() {
    console.log('✅ Sistema de exportación PDF ARVIC cargado exitosamente');
    
    // Verificar si ya existe un panel de configuración visible
    const configPanel = document.getElementById('reportConfigPanel');
    if (configPanel && configPanel.style.display !== 'none') {
        addPDFButtonToConfigPanel();
    }
    
    // Verificar integración con funciones existentes
    setTimeout(() => {
        if (typeof validateRequiredFilters !== 'function') {
            console.warn('⚠️  Función validateRequiredFilters no encontrada - integración parcial');
        }
        
        if (typeof generateReportPreview !== 'function') {
            console.warn('⚠️  Función generateReportPreview no encontrada - integración parcial');
        }
        
        console.log('🔗 Verificación de integración completada');
    }, 1000);
});

console.log('📄 ARVIC PDF Exporter v3.0 - Sistema completo con diseño exacto iniciado exitosamente');